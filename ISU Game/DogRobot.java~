/**
* DogRobot.java
* Version 1.0
* Author: Theo Liu
* Date: Jan 15 2018
* Description: template for dog robot
**/

// import statements
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.io.*;
import java.awt.Graphics;
import javax.imageio.*;


class DogRobot extends Robot {
  
  private int currentSprite;
  private int x,y;
  private Rectangle boundingBox; 
  private final int width;
  private final int height;
  private int direction;
  private int delay;
  private int speed;
  private int boxWidth;
  private int boxHeight;
  private BufferedImage[] sprites;
  
  //Constructor
  DogRobot(int x, int y){
    super(4);
    speed = 6;
    width = 82;
    height = 82;
    direction = (int)(Math.random() * 4);
    loadSprites();
    currentSprite = 0;
    this.x = x;
    this.y = y;
    boxWidth = width - 40;
    boxHeight = height - 40;
    boundingBox = new Rectangle ((int)x+30, (int)y + 30, boxWidth, boxHeight);
  }
  
  // METHOD getBoundingBox()
  // @param: null @return: Rectangle
  public Rectangle getBoundingBox(){
    return boundingBox;
  }
  
  //METHOD loadSprites() gets spritesheet and stores in array
  // @param: null @return: null
  public void loadSprites(){
    
    try{
      BufferedImage sheet = ImageIO.read(new File("Pictures/dogspritesheet.png"));
      final int rows = 4;
      final int cols = 4;
      
      sprites = new BufferedImage[rows * cols];
      
      for (int j = 0; j < rows; j++){
        for (int i = 0; i < cols; i++){
          sprites[ (j*cols) + i] = sheet.getSubimage(i * width, j * height, width, height);
        }
      }
    } catch(Exception e) {System.out.println("error loading sheet");};
  }
  
  // METHOD: move() changes x and y based on direction loops through array of sprites
  // @param: null @return: null
  public void move(){
    
    currentSprite++; //change sprite
    
    // up movement
    if (direction == 0){
      
      if (currentSprite >= 12 || currentSprite < 8){
        currentSprite = 8;
      }
      this.y = this.y - speed;
      boundingBox.y = boundingBox.y - speed;
      
     // right movement
    } else if (direction == 1){
    
      if (currentSprite >= 8 || currentSprite < 4){
        currentSprite = 4;
      }
      this.x = this.x + speed;
      boundingBox.x = boundingBox.x+speed;
      
    //down movement
    } else if (direction == 2){
      if (currentSprite >= 4){
        currentSprite = 0;
      }
      this.y = this.y + speed;
      boundingBox.y = boundingBox.y+speed;
      
    // left movement
    } else if (direction == 3){
      
      if (currentSprite >= 16 || currentSprite < 12){
        currentSprite = 12;
      }
      this.x = this.x - speed;
      boundingBox.x = boundingBox.x-speed;
    }
  }
  
  // METHOD switches direction
  // @param: null @return: null
//  public void switchDirection(){
//    if (direction == 0 || direction == 1){
//      direction = direction + 2;
//    } else {
//      direction = direction - 2;
//    }
//  }
  
  // METHOD setDirection() used for rotating robots on clicks
  // @param: int turn @return: null
  public void setDirection(int turn){
    if (turn == 0){
      direction --;
      if (direction < 0){
        direction = 3;
      }
    } else if (turn == 1) {
      direction++;
      if (direction > 3){
        direction = 0;
      }
    }
  }
  
 // METHOD draw()
   //@param: Graphics g, @return: null
  public void draw(Graphics g) {
    g.drawImage(sprites[currentSprite], x, y, null);
    //g.drawRect(getBoundingBox().x,getBoundingBox().y,width-40,height-40);  uncomment to see hitbox
  }
  
  //METHOD getBoxWidth()
  // @param: null @return: int
  public int getBoxWidth(){
    return boxWidth;
    
  }
  //METHOD getBoxHeight()
  // @param: null @return: int
  public int getBoxHeight(){
    return boxHeight;
  }
}